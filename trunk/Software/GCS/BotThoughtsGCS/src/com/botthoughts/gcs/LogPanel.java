/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.botthoughts.gcs;

import com.botthoughts.JFileChooser;
import com.botthoughts.JFileFilter;
import com.botthoughts.Parser;
import java.io.*;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/**
 *
 * @author Michael Shimniok
 */
public class LogPanel extends javax.swing.JPanel {

    //private LogReader logReader;
    private LogFile log;
    private Parser parser;
    private JFileChooser fileChooser;
    private JFileFilter fileFilter;
    private LogReader reader;
    
    /**
     * Creates new form LogPanel
     */
    public LogPanel() {
        initComponents();
        fileFilter = new JFileFilter();
        fileFilter.addType(".btl");
        fileChooser = new JFileChooser();
        fileChooser.setFileFilter(fileFilter);
        fileFilter.setDescription("Open Log File");
        playButton.setEnabled(false);
        pauseButton.setEnabled(false);
        rewButton.setEnabled(false);
        progressBar.setEnabled(false);
    }
   
    
    public void setHandler(Parser p) {
        parser = p;
    }

    public void doPause() {
        if (reader != null) {
            reader.pause();
        }
    }
    
    public void doPlay() {
        if (reader != null) {
            reader.play();
        }
    }

    private boolean doOpen() {
        boolean outcome = false;
        int option = fileChooser.showOpenDialog(new JFrame());
        if (option == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                log = new LogFile(file);
                progressBar.setMaximum(log.getLines());
                System.out.println("Line Count "+Integer.toString(progressBar.getMaximum()));
                outcome = true;
                reader = new LogReader();
                reader.execute();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(LogPanel.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(new JFrame(),
                    ex.getMessage(), "File Open Error",
                    JOptionPane.ERROR_MESSAGE );
            }
        }
        return outcome;
    }

    class LogReader extends SwingWorker<Void, String> {
        private boolean paused = true;
        private boolean done = false;
        
        public void pause() {
            paused = true;
        }
        
        public void play() {
            paused = false;
        }
        
        @Override
        protected Void doInBackground() throws Exception {
            // TODO: Convert to using timers
            // TODO: rework pause/play
            int lineCount = 0;
            try {
                String line;
                int lastTime = 0;
                while (!done) {
                    if (paused) {
                        Thread.sleep(100);
                    } else {
                        line = log.readLine();
                        if (line == null) {
                            done = true;
                        }
                        int now = Integer.parseInt(line.substring( 0, line.indexOf(",")));
                        publish( new String( line.substring( line.indexOf(",")+1, line.length()) ) );
                        progressBar.setValue(++lineCount);
                        try {
                            Thread.sleep(now - lastTime);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(LogReader.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        lastTime = now;
                    }
                }
                log.close();
            } catch (IOException ex) {
                Logger.getLogger(LogReader.class.getName()).log(Level.SEVERE, null, ex);
            }
            return null;        
        }
        
        @Override
        protected void process(List<String> data) {
            System.out.println("process: "+data.get(0).toString());
            parser.parseData(data.remove(0).toString()+"\n");
        }
   }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jButton2 = new javax.swing.JButton();
        openButton = new javax.swing.JButton();
        rewButton = new javax.swing.JButton();
        playButton = new javax.swing.JButton();
        pauseButton = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();

        jButton2.setText("jButton2");

        setDoubleBuffered(false);
        setFocusable(false);
        setMaximumSize(new java.awt.Dimension(450, 55));
        setMinimumSize(new java.awt.Dimension(450, 55));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(450, 55));
        setLayout(new java.awt.GridBagLayout());

        openButton.setText("Open Log");
        openButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openButton.setMaximumSize(new java.awt.Dimension(90, 25));
        openButton.setMinimumSize(new java.awt.Dimension(90, 25));
        openButton.setPreferredSize(new java.awt.Dimension(90, 25));
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        add(openButton, gridBagConstraints);

        rewButton.setText("|<");
        rewButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        rewButton.setMaximumSize(new java.awt.Dimension(30, 25));
        rewButton.setMinimumSize(new java.awt.Dimension(30, 25));
        rewButton.setPreferredSize(new java.awt.Dimension(30, 25));
        rewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rewButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        add(rewButton, gridBagConstraints);

        playButton.setText(">");
        playButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        playButton.setMaximumSize(new java.awt.Dimension(30, 25));
        playButton.setMinimumSize(new java.awt.Dimension(30, 25));
        playButton.setPreferredSize(new java.awt.Dimension(30, 25));
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        add(playButton, gridBagConstraints);

        pauseButton.setText("||");
        pauseButton.setMaximumSize(new java.awt.Dimension(30, 25));
        pauseButton.setMinimumSize(new java.awt.Dimension(30, 25));
        pauseButton.setPreferredSize(new java.awt.Dimension(30, 25));
        pauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        add(pauseButton, gridBagConstraints);

        progressBar.setMaximumSize(new java.awt.Dimension(120, 19));
        progressBar.setMinimumSize(new java.awt.Dimension(120, 19));
        progressBar.setPreferredSize(new java.awt.Dimension(120, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        add(progressBar, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        if (doOpen()) {
            playButton.setEnabled(true);
            rewButton.setEnabled(true);
            progressBar.setEnabled(true);
        }
    }//GEN-LAST:event_openButtonActionPerformed

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        playButton.setEnabled(false);
        pauseButton.setEnabled(true);
        doPlay();
    }//GEN-LAST:event_playButtonActionPerformed

    private void rewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rewButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rewButtonActionPerformed

    private void pauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseButtonActionPerformed
        playButton.setEnabled(true);
        pauseButton.setEnabled(false);
        doPause();
    }//GEN-LAST:event_pauseButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton openButton;
    private javax.swing.JButton pauseButton;
    private javax.swing.JButton playButton;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton rewButton;
    // End of variables declaration//GEN-END:variables

}
